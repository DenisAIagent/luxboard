{"version":3,"sources":["../src/index.ts","../src/RichTextInput.tsx","../src/TiptapEditorProvider.tsx","../src/TiptapEditorContext.tsx","../src/RichTextInputToolbar.tsx","../src/buttons/FormatButtons.tsx","../src/useTiptapEditor.ts","../src/buttons/ListButtons.tsx","../src/buttons/AlignmentButtons.tsx","../src/buttons/LinkButtons.tsx","../src/buttons/useEditorSelection.ts","../src/buttons/QuoteButtons.tsx","../src/buttons/ClearButtons.tsx","../src/buttons/LevelSelect.tsx"],"sourcesContent":["export * from './RichTextInput';\nexport * from './buttons';\nexport * from './RichTextInputToolbar';\nexport * from './TiptapEditorContext';\nexport * from './TiptapEditorProvider';\nexport * from './useTiptapEditor';\n","import * as React from 'react';\nimport { ReactElement, ReactNode, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { useEditor, Editor, EditorOptions, EditorContent } from '@tiptap/react';\nimport StarterKit from '@tiptap/starter-kit';\nimport Underline from '@tiptap/extension-underline';\nimport Link from '@tiptap/extension-link';\nimport TextAlign from '@tiptap/extension-text-align';\nimport { FormHelperText } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport { useInput, useResourceContext } from 'ra-core';\nimport {\n    CommonInputProps,\n    InputHelperText,\n    Labeled,\n    LabeledProps,\n} from 'ra-ui-materialui';\nimport { TiptapEditorProvider } from './TiptapEditorProvider';\nimport { RichTextInputToolbar } from './RichTextInputToolbar';\n\n/**\n * A rich text editor for the react-admin that is accessible and supports translations. Based on [Tiptap](https://www.tiptap.dev/).\n * @param props The input props. Accept all common react-admin input props.\n * @param {EditorOptions} props.editorOptions The options to pass to the Tiptap editor.\n * @param {ReactNode} props.toolbar The toolbar containing the editors commands.\n *\n * @example <caption>Customizing the editors options</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the toolbar commands</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <LevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\nexport const RichTextInput = (props: RichTextInputProps) => {\n    const {\n        className,\n        defaultValue = '',\n        disabled = false,\n        editorOptions = DefaultEditorOptions,\n        fullWidth,\n        helperText,\n        label,\n        readOnly = false,\n        source,\n        toolbar,\n    } = props;\n\n    const resource = useResourceContext(props);\n    const {\n        id,\n        field,\n        isRequired,\n        fieldState,\n        formState: { isSubmitted },\n    } = useInput({ ...props, source, defaultValue });\n\n    const editor = useEditor({\n        ...editorOptions,\n        editable: !disabled && !readOnly,\n        content: field.value,\n        editorProps: {\n            attributes: {\n                id,\n            },\n        },\n    });\n\n    const { error, invalid, isTouched } = fieldState;\n\n    useEffect(() => {\n        if (!editor) return;\n\n        editor.setOptions({\n            editable: !disabled && !readOnly,\n            editorProps: {\n                attributes: {\n                    id,\n                },\n            },\n        });\n    }, [disabled, editor, readOnly, id]);\n\n    useEffect(() => {\n        if (!editor) {\n            return;\n        }\n\n        const handleEditorUpdate = () => {\n            if (editor.isEmpty) {\n                field.onChange('');\n                field.onBlur();\n                return;\n            }\n\n            const html = editor.getHTML();\n            field.onChange(html);\n            field.onBlur();\n        };\n\n        editor.on('update', handleEditorUpdate);\n        return () => {\n            editor.off('update', handleEditorUpdate);\n        };\n    }, [editor, field]);\n\n    return (\n        <Labeled\n            isRequired={isRequired}\n            label={label}\n            id={`${id}-label`}\n            color={fieldState?.invalid ? 'error' : undefined}\n            source={source}\n            resource={resource}\n            fullWidth={fullWidth}\n        >\n            <RichTextInputContent\n                className={clsx('ra-input', `ra-input-${source}`, className)}\n                editor={editor}\n                error={error}\n                helperText={helperText}\n                id={id}\n                isTouched={isTouched}\n                isSubmitted={isSubmitted}\n                invalid={invalid}\n                toolbar={toolbar || <RichTextInputToolbar />}\n            />\n        </Labeled>\n    );\n};\n\n/**\n * Extracted in a separate component so that we can remove fullWidth from the props injected by Labeled\n * and avoid warnings about unknown props on Root.\n */\nconst RichTextInputContent = ({\n    className,\n    editor,\n    error,\n    fullWidth,\n    helperText,\n    id,\n    isTouched,\n    isSubmitted,\n    invalid,\n    toolbar,\n}: RichTextInputContentProps) => (\n    <Root className={className}>\n        <TiptapEditorProvider value={editor}>\n            {toolbar}\n            <EditorContent\n                aria-labelledby={`${id}-label`}\n                className={classes.editorContent}\n                editor={editor}\n            />\n        </TiptapEditorProvider>\n        <FormHelperText\n            className={\n                (isTouched || isSubmitted) && invalid\n                    ? 'ra-rich-text-input-error'\n                    : ''\n            }\n            error={(isTouched || isSubmitted) && invalid}\n        >\n            <InputHelperText\n                touched={isTouched || isSubmitted}\n                error={error?.message}\n                helperText={helperText}\n            />\n        </FormHelperText>\n    </Root>\n);\n\nexport const DefaultEditorOptions = {\n    extensions: [\n        StarterKit,\n        Underline,\n        Link,\n        TextAlign.configure({\n            types: ['heading', 'paragraph'],\n        }),\n    ],\n};\n\nconst PREFIX = 'RaRichTextInput';\nconst classes = {\n    editorContent: `${PREFIX}-editorContent`,\n};\nconst Root = styled('div', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n\n    [`& .${classes.editorContent}`]: {\n        width: '100%',\n        '& .ProseMirror': {\n            backgroundColor: theme.palette.background.default,\n            borderColor:\n                theme.palette.mode === 'light'\n                    ? 'rgba(0, 0, 0, 0.23)'\n                    : 'rgba(255, 255, 255, 0.23)',\n            borderRadius: theme.shape.borderRadius,\n            borderStyle: 'solid',\n            borderWidth: '1px',\n            padding: theme.spacing(1),\n\n            '&[contenteditable=\"false\"], &[contenteditable=\"false\"]:hover, &[contenteditable=\"false\"]:focus': {\n                backgroundColor: theme.palette.action.disabledBackground,\n            },\n\n            '&:hover': {\n                backgroundColor: theme.palette.action.hover,\n            },\n            '&:focus': {\n                backgroundColor: theme.palette.background.default,\n            },\n            '& p': {\n                margin: '0 0 1em 0',\n                '&:last-child': {\n                    marginBottom: 0,\n                },\n            },\n        },\n    },\n}));\n\nexport type RichTextInputProps = CommonInputProps &\n    Omit<LabeledProps, 'children'> & {\n        disabled?: boolean;\n        readOnly?: boolean;\n        editorOptions?: Partial<EditorOptions>;\n        toolbar?: ReactNode;\n    };\n\nexport type RichTextInputContentProps = {\n    className?: string;\n    editor?: Editor;\n    error?: any;\n    fullWidth?: boolean;\n    helperText?: string | ReactElement | false;\n    id: string;\n    isTouched: boolean;\n    isSubmitted: boolean;\n    invalid: boolean;\n    toolbar?: ReactNode;\n};\n","import * as React from 'react';\nimport { Editor } from '@tiptap/react';\nimport { TiptapEditorContext } from './TiptapEditorContext';\n\nexport const TiptapEditorProvider = ({\n    children,\n    value,\n}: TiptapEditorProviderProps) => (\n    <TiptapEditorContext.Provider value={value}>\n        {children}\n    </TiptapEditorContext.Provider>\n);\n\nexport type TiptapEditorProviderProps = {\n    children: React.ReactNode;\n    value: Editor;\n};\n","import { createContext } from 'react';\nimport { Editor } from '@tiptap/react';\n\nexport const TiptapEditorContext = createContext<Editor>(undefined);\n","import * as React from 'react';\nimport { ReactNode } from 'react';\nimport { styled } from '@mui/material/styles';\nimport {\n    AlignmentButtons,\n    ClearButtons,\n    FormatButtons,\n    LevelSelect,\n    ListButtons,\n    LinkButtons,\n    QuoteButtons,\n} from './buttons';\n\n/**\n * A toolbar for the <RichTextInput>.\n * @param props The toolbar props.\n * @param {ReactNode} props.children The toolbar children, usually many <ToggleButton>.\n * @param {'small' | 'medium' | 'large'} props.size The default size to apply to the **default** children.\n *\n * @example <caption>Customizing the size</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = (props) => (\n *     <RichTextInput\n *         toolbar={<RichTextInputToolbar size=\"large\" />}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n *\n * @example <caption>Customizing the children</caption>\n * import { RichTextInput, RichTextInputToolbar } from 'ra-input-rich-text';\n * const MyRichTextInput = ({ size, ...props }) => (\n *     <RichTextInput\n *         toolbar={(\n *             <RichTextInputToolbar>\n *                 <LevelSelect size={size} />\n *                 <FormatButtons size={size} />\n *                 <ListButtons size={size} />\n *                 <LinkButtons size={size} />\n *                 <QuoteButtons size={size} />\n *                 <ClearButtons size={size} />\n *             </RichTextInputToolbar>\n *         )}\n *         label=\"Body\"\n *         source=\"body\"\n *         {...props}\n *     />\n * );\n */\nexport const RichTextInputToolbar = (props: RichTextInputToolbarProps) => {\n    const {\n        size = 'medium',\n        children = (\n            <>\n                <LevelSelect size={size} />\n                <FormatButtons size={size} />\n                <AlignmentButtons size={size} />\n                <ListButtons size={size} />\n                <LinkButtons size={size} />\n                <QuoteButtons size={size} />\n                <ClearButtons size={size} />\n            </>\n        ),\n        ...rest\n    } = props;\n\n    return (\n        <Root className={classes.root} {...rest}>\n            {children}\n        </Root>\n    );\n};\n\nconst PREFIX = 'RaRichTextInputToolbar';\nconst classes = {\n    root: `${PREFIX}-root`,\n};\nconst Root = styled('div')(({ theme }) => ({\n    [`&.${classes.root}`]: {\n        display: 'flex',\n        marginBottom: theme.spacing(1),\n        alignItems: 'center',\n        '& > *': {\n            marginRight: theme.spacing(1),\n        },\n        '& > *:last-child': {\n            marginRight: 0,\n        },\n    },\n}));\n\nexport type RichTextInputToolbarProps = {\n    children?: ReactNode;\n    size?: 'small' | 'medium' | 'large';\n};\n","import * as React from 'react';\nimport { MouseEvent, useEffect, useState } from 'react';\n\nimport { Editor } from '@tiptap/react';\nimport {\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonGroupProps,\n} from '@mui/material';\nimport FormatBold from '@mui/icons-material/FormatBold';\nimport FormatItalic from '@mui/icons-material/FormatItalic';\nimport FormatUnderlined from '@mui/icons-material/FormatUnderlined';\nimport FormatStrikethrough from '@mui/icons-material/FormatStrikethrough';\nimport Code from '@mui/icons-material/Code';\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const FormatButtons = (props: ToggleButtonGroupProps) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n    const [values, setValues] = useState<string[]>([]);\n\n    const boldLabel = translate('ra.tiptap.bold', {\n        _: 'Bold',\n    });\n\n    const italicLabel = translate('ra.tiptap.italic', {\n        _: 'Italic',\n    });\n\n    const underlineLabel = translate('ra.tiptap.underline', {\n        _: 'Underline',\n    });\n\n    const strikeLabel = translate('ra.tiptap.strike', {\n        _: 'Strikethrough',\n    });\n\n    const codeLabel = translate('ra.tiptap.code', {\n        _: 'Code',\n    });\n\n    useEffect(() => {\n        const handleUpdate = () => {\n            setValues(() =>\n                FormatValues.reduce((acc, value) => {\n                    if (editor && editor.isActive(value)) {\n                        acc.push(value);\n                    }\n                    return acc;\n                }, [])\n            );\n        };\n\n        if (editor) {\n            editor.on('update', handleUpdate);\n            editor.on('selectionUpdate', handleUpdate);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('update', handleUpdate);\n                editor.off('selectionUpdate', handleUpdate);\n            }\n        };\n    }, [editor]);\n\n    const handleChange = (\n        event: MouseEvent<HTMLElement>,\n        newFormats: string[]\n    ) => {\n        FormatValues.forEach(format => {\n            const shouldBeDeactivated =\n                editor &&\n                editor.isActive(format) &&\n                !newFormats.includes(format);\n            const shouldBeActivated =\n                editor &&\n                !editor.isActive(format) &&\n                newFormats.includes(format);\n\n            if (shouldBeDeactivated || shouldBeActivated) {\n                FormatActions[format](editor);\n            }\n        });\n    };\n\n    return (\n        <ToggleButtonGroup\n            {...props}\n            disabled={!editor?.isEditable}\n            onChange={handleChange}\n            value={values}\n        >\n            <ToggleButton value=\"bold\" aria-label={boldLabel} title={boldLabel}>\n                <FormatBold fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"italic\"\n                aria-label={italicLabel}\n                title={italicLabel}\n            >\n                <FormatItalic fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"underline\"\n                aria-label={underlineLabel}\n                title={underlineLabel}\n            >\n                <FormatUnderlined fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"strike\"\n                aria-label={strikeLabel}\n                title={strikeLabel}\n            >\n                <FormatStrikethrough fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton value=\"code\" aria-label={codeLabel} title={codeLabel}>\n                <Code fontSize=\"inherit\" />\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n\nconst FormatValues = ['bold', 'italic', 'underline', 'strike', 'code'];\n\nconst FormatActions = {\n    bold: (editor: Editor) => editor.chain().focus().toggleBold().run(),\n    italic: (editor: Editor) => editor.chain().focus().toggleItalic().run(),\n    underline: (editor: Editor) =>\n        editor.chain().focus().toggleUnderline().run(),\n    strike: (editor: Editor) => editor.chain().focus().toggleStrike().run(),\n    code: (editor: Editor) => editor.chain().focus().toggleCode().run(),\n};\n","import { useContext, useEffect, useState } from 'react';\nimport { TiptapEditorContext } from './TiptapEditorContext';\n\nexport const useTiptapEditor = () => {\n    const [ready, setReady] = useState(false);\n    const editor = useContext(TiptapEditorContext);\n\n    useEffect(() => {\n        const onReady = () => {\n            setReady(true);\n        };\n\n        if (editor != null) {\n            // This ensure support for hot reload\n            setReady(editor.isEditable);\n\n            editor.on('create', onReady);\n        }\n\n        return () => {\n            if (editor != null) {\n                editor.off('create', onReady);\n            }\n        };\n    }, [editor]);\n\n    if (ready) {\n        return editor;\n    }\n    return null;\n};\n","import * as React from 'react';\nimport { MouseEvent, useEffect, useState } from 'react';\n\nimport { Editor } from '@tiptap/react';\nimport {\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonGroupProps,\n} from '@mui/material';\nimport FormatListBulleted from '@mui/icons-material/FormatListBulleted';\nimport FormatListNumbered from '@mui/icons-material/FormatListNumbered';\n\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const ListButtons = (props: ToggleButtonGroupProps) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n\n    const bulletListLabel = translate('ra.tiptap.list_bulleted', {\n        _: 'Bulleted list',\n    });\n    const numberListLabel = translate('ra.tiptap.list_numbered', {\n        _: 'Numbered list',\n    });\n\n    const [value, setValue] = useState<string>();\n\n    const handleChange = (\n        event: MouseEvent<HTMLElement>,\n        newFormat: string\n    ) => {\n        ListValues.forEach(format => {\n            const shouldBeDeactivated =\n                editor && editor.isActive(format) && newFormat !== format;\n            const shouldBeActivated =\n                editor && !editor.isActive(format) && newFormat === format;\n\n            if (shouldBeDeactivated || shouldBeActivated) {\n                ListActions[format](editor);\n            }\n        });\n    };\n\n    useEffect(() => {\n        const handleUpdate = () => {\n            setValue(() =>\n                ListValues.reduce((acc, value) => {\n                    if (editor && editor.isActive(value)) {\n                        return value;\n                    }\n                    return acc;\n                }, undefined)\n            );\n        };\n\n        if (editor) {\n            editor.on('update', handleUpdate);\n            editor.on('selectionUpdate', handleUpdate);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('update', handleUpdate);\n                editor.off('selectionUpdate', handleUpdate);\n            }\n        };\n    }, [editor]);\n\n    return (\n        <ToggleButtonGroup\n            {...props}\n            disabled={!editor?.isEditable}\n            exclusive\n            onChange={handleChange}\n            value={value}\n        >\n            <ToggleButton\n                value=\"bulletList\"\n                aria-label={bulletListLabel}\n                title={bulletListLabel}\n            >\n                <FormatListBulleted fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"orderedList\"\n                aria-label={numberListLabel}\n                title={numberListLabel}\n            >\n                <FormatListNumbered fontSize=\"inherit\" />\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n\nconst ListValues = ['bulletList', 'orderedList'];\nconst ListActions = {\n    bulletList: (editor: Editor) =>\n        editor.chain().focus().toggleBulletList().run(),\n    orderedList: (editor: Editor) =>\n        editor.chain().focus().toggleOrderedList().run(),\n};\n","import * as React from 'react';\nimport { MouseEvent, useEffect, useState } from 'react';\n\nimport { Editor } from '@tiptap/react';\nimport {\n    ToggleButton,\n    ToggleButtonGroup,\n    ToggleButtonGroupProps,\n} from '@mui/material';\nimport FormatAlignCenter from '@mui/icons-material/FormatAlignCenter';\nimport FormatAlignLeft from '@mui/icons-material/FormatAlignLeft';\nimport FormatAlignRight from '@mui/icons-material/FormatAlignRight';\nimport FormatAlignJustify from '@mui/icons-material/FormatAlignJustify';\n\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const AlignmentButtons = (props: ToggleButtonGroupProps) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n    const [value, setValue] = useState<string>('left');\n\n    const leftLabel = translate('ra.tiptap.align_left', { _: 'Align left' });\n    const rightLabel = translate('ra.tiptap.align_right', { _: 'Align right' });\n    const centerLabel = translate('ra.tiptap.align_center', { _: 'Center' });\n    const justifyLabel = translate('ra.tiptap.align_justify', { _: 'Justify' });\n\n    useEffect(() => {\n        const handleUpdate = () => {\n            setValue(currentValue =>\n                AlignmentValues.reduce((acc, value) => {\n                    if (editor && editor.isActive({ textAlign: value })) {\n                        return value;\n                    }\n                    return acc;\n                }, currentValue)\n            );\n        };\n\n        if (editor) {\n            editor.on('update', handleUpdate);\n            editor.on('selectionUpdate', handleUpdate);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('update', handleUpdate);\n                editor.off('selectionUpdate', handleUpdate);\n            }\n        };\n    }, [editor]);\n\n    const handleChange = (\n        event: MouseEvent<HTMLElement>,\n        newFormat: string\n    ) => {\n        if (AlignmentActions[newFormat]) {\n            AlignmentActions[newFormat](editor);\n        }\n    };\n\n    return (\n        <ToggleButtonGroup\n            {...props}\n            disabled={!editor?.isEditable}\n            exclusive\n            onChange={handleChange}\n            value={value}\n        >\n            <ToggleButton value=\"left\" aria-label={leftLabel} title={leftLabel}>\n                <FormatAlignLeft fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"center\"\n                aria-label={centerLabel}\n                title={centerLabel}\n            >\n                <FormatAlignCenter fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"right\"\n                aria-label={rightLabel}\n                title={rightLabel}\n            >\n                <FormatAlignRight fontSize=\"inherit\" />\n            </ToggleButton>\n            <ToggleButton\n                value=\"justify\"\n                aria-label={justifyLabel}\n                title={justifyLabel}\n            >\n                <FormatAlignJustify fontSize=\"inherit\" />\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n};\n\nconst AlignmentValues = ['left', 'center', 'right', 'justify', 'code'];\n\nconst AlignmentActions = {\n    left: (editor: Editor) => editor.chain().focus().setTextAlign('left').run(),\n    center: (editor: Editor) =>\n        editor.chain().focus().setTextAlign('center').run(),\n    right: (editor: Editor) =>\n        editor.chain().focus().setTextAlign('right').run(),\n    justify: (editor: Editor) =>\n        editor.chain().focus().setTextAlign('justify').run(),\n};\n","import * as React from 'react';\nimport { ToggleButton, ToggleButtonProps } from '@mui/material';\nimport InsertLink from '@mui/icons-material/InsertLink';\n\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\nimport { useEditorSelection } from './useEditorSelection';\n\nexport const LinkButtons = (props: Omit<ToggleButtonProps, 'value'>) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n    const currentTextSelection = useEditorSelection();\n\n    const label = translate('ra.tiptap.link', {\n        _: 'Add a link',\n    });\n\n    const handleClick = () => {\n        if (!editor.can().setLink({ href: '' })) {\n            return;\n        }\n\n        const url = window.prompt('URL');\n\n        editor\n            .chain()\n            .focus()\n            .extendMarkRange('link')\n            .setLink({ href: url })\n            .run();\n    };\n\n    return (\n        <ToggleButton\n            aria-label={label}\n            title={label}\n            {...props}\n            disabled={!editor?.isEditable || !currentTextSelection}\n            value=\"link\"\n            onClick={handleClick}\n            selected={editor && editor.isActive('link')}\n        >\n            <InsertLink fontSize=\"inherit\" />\n        </ToggleButton>\n    );\n};\n","import { useEffect, useState } from 'react';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\n/**\n * A hook that returns the current text selection in the editor.\n * @returns {(string|null)} The current text selection if any, or null.\n */\nexport const useEditorSelection = () => {\n    const editor = useTiptapEditor();\n\n    const [selection, setSelection] = useState<string | null>(\n        editor\n            ? editor.state.doc.textBetween(\n                  editor.state.selection.from,\n                  editor.state.selection.to\n              )\n            : null\n    );\n\n    useEffect(() => {\n        const handleSelectionChange = () => {\n            setSelection(\n                editor\n                    ? editor.state.doc.textBetween(\n                          editor.state.selection.from,\n                          editor.state.selection.to\n                      )\n                    : null\n            );\n        };\n\n        if (editor) {\n            editor.on('selectionUpdate', handleSelectionChange);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('selectionUpdate', handleSelectionChange);\n            }\n        };\n    }, [editor]);\n\n    return selection;\n};\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { ToggleButton, ToggleButtonProps } from '@mui/material';\nimport FormatQuote from '@mui/icons-material/FormatQuote';\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const QuoteButtons = (props: Omit<ToggleButtonProps, 'value'>) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n    const [isActive, setIsActive] = useState(false);\n\n    const label = translate('ra.tiptap.blockquote', {\n        _: 'Blockquote',\n    });\n\n    useEffect(() => {\n        const handleUpdate = () => {\n            setIsActive(editor && editor.isActive('blockquote'));\n        };\n\n        if (editor) {\n            editor.on('update', handleUpdate);\n            editor.on('selectionUpdate', handleUpdate);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('update', handleUpdate);\n                editor.off('selectionUpdate', handleUpdate);\n            }\n        };\n    }, [editor]);\n\n    return (\n        <ToggleButton\n            aria-label={label}\n            title={label}\n            {...props}\n            disabled={!editor?.isEditable}\n            onClick={() => editor.chain().focus().toggleBlockquote().run()}\n            selected={isActive}\n            value=\"quote\"\n        >\n            <FormatQuote fontSize=\"inherit\" />\n        </ToggleButton>\n    );\n};\n","import * as React from 'react';\nimport { ToggleButton, ToggleButtonProps } from '@mui/material';\nimport FormatClear from '@mui/icons-material/FormatClear';\nimport { useTranslate } from 'ra-core';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const ClearButtons = (props: Omit<ToggleButtonProps, 'value'>) => {\n    const editor = useTiptapEditor();\n    const translate = useTranslate();\n\n    const label = translate('ra.tiptap.clear_format', {\n        _: 'Clear format',\n    });\n\n    return (\n        <ToggleButton\n            aria-label={label}\n            title={label}\n            {...props}\n            disabled={!editor?.isEditable}\n            value=\"clear\"\n            onClick={() => editor.chain().focus().unsetAllMarks().run()}\n        >\n            <FormatClear fontSize=\"inherit\" />\n        </ToggleButton>\n    );\n};\n","import * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport { List, ListItem, ListItemText, Menu, MenuItem } from '@mui/material';\nimport { styled, alpha } from '@mui/material/styles';\nimport ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';\nimport { useTranslate } from 'ra-core';\nimport clsx from 'clsx';\nimport { useTiptapEditor } from '../useTiptapEditor';\n\nexport const LevelSelect = (props: LevelSelectProps) => {\n    const translate = useTranslate();\n    const editor = useTiptapEditor();\n    const [anchorElement, setAnchorElement] = useState<HTMLDivElement | null>(\n        null\n    );\n    const { size } = props;\n    const [selectedOption, setSelectedOption] = useState(options[0]);\n\n    const handleMenuItemClick = (\n        event: React.MouseEvent<HTMLLIElement, MouseEvent>,\n        index: number\n    ) => {\n        setAnchorElement(null);\n        const selectedItem = options[index];\n        if (selectedItem.value === 'paragraph') {\n            editor.chain().focus().setParagraph().run();\n        } else if (selectedItem.value === 'heading') {\n            editor\n                .chain()\n                .focus()\n                .setHeading({ level: selectedItem.level })\n                .run();\n        }\n    };\n\n    const handleClickListItem = (\n        event: React.MouseEvent<HTMLDivElement, MouseEvent>\n    ) => {\n        setAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = (event: React.MouseEvent<Document, MouseEvent>) => {\n        setAnchorElement(null);\n    };\n\n    useEffect(() => {\n        const handleUpdate = () => {\n            setSelectedOption(currentOption =>\n                options.reduce((acc, option) => {\n                    if (editor) {\n                        if (\n                            option.value === 'paragraph' &&\n                            editor.isActive('paragraph')\n                        ) {\n                            return option;\n                        }\n\n                        if (\n                            editor.isActive('heading', {\n                                level: (option as HeadingLevelOption).level,\n                            })\n                        ) {\n                            return option;\n                        }\n                    }\n                    return acc;\n                }, currentOption)\n            );\n        };\n\n        if (editor) {\n            editor.on('update', handleUpdate);\n            editor.on('selectionUpdate', handleUpdate);\n        }\n\n        return () => {\n            if (editor) {\n                editor.off('update', handleUpdate);\n                editor.off('selectionUpdate', handleUpdate);\n            }\n        };\n    }, [editor]);\n\n    return (\n        <Root>\n            <List\n                component=\"nav\"\n                aria-label={translate('ra.tiptap.select_level', {\n                    _: 'Select the level',\n                })}\n                dense\n                disablePadding\n                className={classes.list}\n            >\n                <ListItem\n                    button\n                    aria-haspopup=\"true\"\n                    aria-controls=\"level-menu\"\n                    aria-label={translate('ra.tiptap.current_level', {\n                        _: 'Current level',\n                    })}\n                    disabled={!editor?.isEditable}\n                    onClick={handleClickListItem}\n                    className={clsx({\n                        [classes.sizeSmall]: size === 'small',\n                        [classes.sizeLarge]: size === 'large',\n                    })}\n                >\n                    <ListItemText\n                        primary={translate(selectedOption.label, {\n                            _: selectedOption.defaultLabel,\n                        })}\n                    />\n                    <ArrowDropDownIcon />\n                </ListItem>\n            </List>\n            <Menu\n                anchorEl={anchorElement}\n                open={Boolean(anchorElement)}\n                id=\"level-menu\"\n                onClose={handleClose}\n            >\n                {options.map((option, index) => (\n                    <MenuItem\n                        key={option.label}\n                        selected={option === selectedOption}\n                        onClick={event => {\n                            handleMenuItemClick(event, index);\n                        }}\n                    >\n                        {translate(option.label, { _: option.defaultLabel })}\n                    </MenuItem>\n                ))}\n            </Menu>\n        </Root>\n    );\n};\n\ntype LevelOption = ParagraphLevelOption | HeadingLevelOption;\n\ntype ParagraphLevelOption = {\n    label: string;\n    defaultLabel: string;\n    value: 'paragraph';\n};\n\ntype HeadingLevelOption = {\n    label: string;\n    defaultLabel: string;\n    value: 'heading';\n    level: 1 | 2 | 3 | 4 | 5 | 6;\n};\n\nconst options: Array<LevelOption | HeadingLevelOption> = [\n    {\n        label: 'ra.tiptap.paragraph',\n        defaultLabel: 'Normal',\n        value: 'paragraph',\n    },\n    {\n        label: 'ra.tiptap.heading1',\n        defaultLabel: 'Heading 1',\n        value: 'heading',\n        level: 1,\n    },\n    {\n        label: 'ra.tiptap.heading2',\n        defaultLabel: 'Heading 2',\n        value: 'heading',\n        level: 2,\n    },\n    {\n        label: 'ra.tiptap.heading3',\n        defaultLabel: 'Heading 3',\n        value: 'heading',\n        level: 3,\n    },\n    {\n        label: 'ra.tiptap.heading4',\n        defaultLabel: 'Heading 4',\n        value: 'heading',\n        level: 4,\n    },\n    {\n        label: 'ra.tiptap.heading5',\n        defaultLabel: 'Heading 5',\n        value: 'heading',\n        level: 5,\n    },\n    {\n        label: 'ra.tiptap.heading6',\n        defaultLabel: 'Heading 6',\n        value: 'heading',\n        level: 6,\n    },\n];\n\nconst PREFIX = 'RaRichTextInputLevelSelect';\nconst classes = {\n    list: `${PREFIX}-list`,\n    sizeSmall: `${PREFIX}-sizeSmall`,\n    sizeLarge: `${PREFIX}-sizeLarge`,\n};\nconst Root = styled('div')(({ theme }) => ({\n    [`&.${classes.list}`]: {\n        borderRadius: theme.shape.borderRadius,\n        border: `1px solid ${alpha(theme.palette.action.active, 0.12)}`,\n    },\n    [`& .${classes.sizeSmall}`]: {\n        paddingTop: 1,\n        paddingBottom: 1,\n        '& .MuiTypography-root': {\n            fontSize: theme.typography.pxToRem(13),\n        },\n    },\n    [`& .${classes.sizeLarge}`]: {\n        paddingTop: 8,\n        paddingBottom: 8,\n        '& .MuiTypography-root': {\n            fontSize: theme.typography.pxToRem(15),\n        },\n    },\n}));\n\nexport type LevelSelectProps = {\n    size?: 'small' | 'medium' | 'large';\n};\n"],"mappings":"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","names":[]}